{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","index.js","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","images/image.png"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","world_population","population","console","log","avg","value","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","duration","separator","toFixed","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","fetchPopulation","method","headers","body","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","fetchedData","setState","fetchedPopulation","this","image","src","coronaImage","alt","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.44f9eec2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3ap4x\",\"card\":\"Cards_card__2ke3K\",\"infected\":\"Cards_infected__cphA5\",\"recovered\":\"Cards_recovered__3YRmi\",\"deaths\":\"Cards_deaths__1Cq0W\"};","import React from \"react\";\r\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\r\nimport CountUp from \"react-countup\";\r\nimport cx from \"classnames\";\r\n\r\nimport styles from \"./Cards.module.css\";\r\n\r\nconst Cards = ({\r\n  data: { confirmed, recovered, deaths, lastUpdate },\r\n  population: { world_population },\r\n}) => {\r\n  if (!confirmed && !world_population) {\r\n    return \"Loading...\";\r\n  }\r\n  console.log(world_population);\r\n  const avg = (confirmed.value / world_population) * 100;\r\n  return (\r\n    <div className={styles.container}>\r\n      <Grid container spacing={3} justify=\"center\">\r\n        <Grid\r\n          item\r\n          component={Card}\r\n          xs={12}\r\n          md={3}\r\n          className={cx(styles.card, styles.infected)}\r\n        >\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Infected\r\n            </Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp\r\n                start={0}\r\n                end={confirmed.value}\r\n                duration={2.5}\r\n                separator=\",\"\r\n              />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              In Percentage\r\n            </Typography>\r\n            <Typography variant=\"h5\">{avg.toFixed(2)}%</Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {new Date(lastUpdate).toDateString()}\r\n            </Typography>\r\n            <Typography variant=\"body2\">\r\n              Number of active cases of COVID-19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid\r\n          item\r\n          component={Card}\r\n          xs={12}\r\n          md={3}\r\n          className={cx(styles.card, styles.recovered)}\r\n        >\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Recovered\r\n            </Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp\r\n                start={0}\r\n                end={recovered.value}\r\n                duration={2.5}\r\n                separator=\",\"\r\n              />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              In Percentage\r\n            </Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp\r\n                start={0}\r\n                end={(recovered.value / confirmed.value) * 100}\r\n                duration={2.5}\r\n                separator=\",\"\r\n              />\r\n              %\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {new Date(lastUpdate).toDateString()}\r\n            </Typography>\r\n            <Typography variant=\"body2\">\r\n              Number of recoveries from COVID-19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid\r\n          item\r\n          component={Card}\r\n          xs={12}\r\n          md={3}\r\n          className={cx(styles.card, styles.deaths)}\r\n        >\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Deaths\r\n            </Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp\r\n                start={0}\r\n                end={deaths.value}\r\n                duration={2.5}\r\n                separator=\",\"\r\n              />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              In Percentage\r\n            </Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp\r\n                start={0}\r\n                end={(deaths.value / confirmed.value) * 100}\r\n                duration={2.5}\r\n                separator=\",\"\r\n              />\r\n              %\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {new Date(lastUpdate).toDateString()}\r\n            </Typography>\r\n            <Typography variant=\"body2\">\r\n              Number of deaths cause by COVID-19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cards;\r\n","import axios from \"axios\";\r\n\r\nconst url = \"https://covid19.mathdro.id/api\";\r\n\r\nexport const fetchData = async (country) => {\r\n  let changeableUrl = url;\r\n\r\n  if (country) {\r\n    changeableUrl = `${url}/countries/${country}`;\r\n  }\r\n\r\n  try {\r\n    const {\r\n      data: { confirmed, recovered, deaths, lastUpdate },\r\n    } = await axios.get(changeableUrl);\r\n    return { confirmed, recovered, deaths, lastUpdate };\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const fetchDailyData = async () => {\r\n  try {\r\n    const { data } = await axios.get(`${url}/daily`);\r\n    const modifiedData = data.map((dailyData) => ({\r\n      confirmed: dailyData.confirmed.total,\r\n      deaths: dailyData.deaths.total,\r\n      date: dailyData.reportDate,\r\n    }));\r\n    return modifiedData;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const fetchCountries = async () => {\r\n  try {\r\n    const {\r\n      data: { countries },\r\n    } = await axios.get(`${url}/countries`);\r\n    return countries.map((country) => country.name);\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const fetchPopulation = async () => {\r\n  try {\r\n    const {\r\n      data: { body },\r\n    } = await axios({\r\n      method: \"GET\",\r\n      url: \"https://world-population.p.rapidapi.com/worldpopulation\",\r\n      headers: {\r\n        \"content-type\": \"application/octet-stream\",\r\n        \"x-rapidapi-host\": \"world-population.p.rapidapi.com\",\r\n        \"x-rapidapi-key\": \"27d668ba2amsh5b3d038f0a200c6p1f735ejsnff1546975785\",\r\n      },\r\n    });\r\n    return body;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { fetchDailyData } from \"../../api\";\r\nimport { Line, Bar } from \"react-chartjs-2\";\r\nimport styles from \"./Chart.module.css\";\r\n\r\nconst Chart = ({ data: { confirmed, recovered, deaths }, country }) => {\r\n  const [dailyData, setDailyData] = useState([]);\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      setDailyData(await fetchDailyData());\r\n    };\r\n    fetchAPI();\r\n  }, []);\r\n\r\n  const lineChart = dailyData.length ? (\r\n    <Line\r\n      data={{\r\n        labels: dailyData.map(({ date }) => date),\r\n        datasets: [\r\n          {\r\n            data: dailyData.map(({ confirmed }) => confirmed),\r\n            label: \"Infected\",\r\n            borderColor: \"#3333ff\",\r\n            fill: true,\r\n          },\r\n          {\r\n            data: dailyData.map(({ deaths }) => deaths),\r\n            label: \"Deaths\",\r\n            borderColor: \"red\",\r\n            backgroundColor: \"rgba(255,0,0,0.5)\",\r\n            fill: true,\r\n          },\r\n        ],\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n  const barChart = confirmed ? (\r\n    <Bar\r\n      data={{\r\n        labels: [\"Infected\", \"Recovered\", \"Deaths\"],\r\n        datasets: [\r\n          {\r\n            label: \"People\",\r\n            backgroundColor: [\r\n              \"rgba(0,0,255,0.5)\",\r\n              \"rgba(0,255,0,0.5)\",\r\n              \"rgba(255,0,0,0.5)\",\r\n            ],\r\n            data: [confirmed.value, recovered.value, deaths.value],\r\n          },\r\n        ],\r\n      }}\r\n      options={{\r\n        legend: { display: false },\r\n        title: { display: true, text: `Current state in ${country}` },\r\n      }}\r\n    />\r\n  ) : null;\r\n  return (\r\n    <div className={styles.container}>{country ? barChart : lineChart}</div>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { NativeSelect, FormControl } from \"@material-ui/core\";\r\nimport styles from \"./CountryPicker.module.css\";\r\nimport { fetchCountries } from \"../../api\";\r\n\r\nconst CountryPicker = ({ handleCountryChange }) => {\r\n  const [fetchedCountries, setFetchedCountries] = useState([]);\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      setFetchedCountries(await fetchCountries());\r\n    };\r\n    fetchAPI();\r\n  }, [setFetchedCountries]);\r\n  return (\r\n    <FormControl className={styles.formControl}>\r\n      <NativeSelect\r\n        defaultValue=\"\"\r\n        onChange={(e) => handleCountryChange(e.target.value)}\r\n      >\r\n        <option value=\"\">Global</option>\r\n        {fetchedCountries.map((country, i) => (\r\n          <option key={i} value={country}>\r\n            {country}\r\n          </option>\r\n        ))}\r\n      </NativeSelect>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport default CountryPicker;\r\n","import React from \"react\";\r\n\r\nimport { Cards, Chart, CountryPicker } from \"./components\";\r\nimport styles from \"./App.module.css\";\r\nimport { fetchData, fetchPopulation } from \"./api\";\r\nimport coronaImage from \"./images/image.png\";\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    data: {},\r\n    population: {},\r\n    country: \"\",\r\n  };\r\n  async componentDidMount() {\r\n    const fetchedPopulation = await fetchPopulation();\r\n    const fetchedData = await fetchData();\r\n    this.setState({ data: fetchedData, population: fetchedPopulation });\r\n  }\r\n  handleCountryChange = async (country) => {\r\n    const fetchedData = await fetchData(country);\r\n    this.setState({ data: fetchedData, country: country });\r\n  };\r\n  render() {\r\n    const { data, country, population } = this.state;\r\n    return (\r\n      <div className={styles.container}>\r\n        <img className={styles.image} src={coronaImage} alt=\"COVID-19\" />\r\n        <Cards population={population} data={data} />\r\n        <CountryPicker handleCountryChange={this.handleCountryChange} />\r\n        <Chart data={data} country={country} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1XTTX\",\"image\":\"App_image__Ug-oD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__3F5lj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__3_d9n\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";"],"sourceRoot":""}